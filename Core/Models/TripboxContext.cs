// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Core.Models
{
    public partial class TripboxContext : DbContext
    {
        public TripboxContext()
        {
        }

        public TripboxContext(DbContextOptions<TripboxContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Agent> Agent { get; set; }
        public virtual DbSet<BookingField> BookingField { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Extra> Extra { get; set; }
        public virtual DbSet<Field> Field { get; set; }
        public virtual DbSet<MasterCode> MasterCode { get; set; }
        public virtual DbSet<Member> Member { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<MessageTemplate> MessageTemplate { get; set; }
        public virtual DbSet<NegotiatedRate> NegotiatedRate { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderField> OrderField { get; set; }
        public virtual DbSet<OrderItem> OrderItem { get; set; }
        public virtual DbSet<OrderItemExtra> OrderItemExtra { get; set; }
        public virtual DbSet<OrderItemField> OrderItemField { get; set; }
        public virtual DbSet<OrderItemProduct> OrderItemProduct { get; set; }
        public virtual DbSet<OrderItemResource> OrderItemResource { get; set; }
        public virtual DbSet<OrderItemSession> OrderItemSession { get; set; }
        public virtual DbSet<Package> Package { get; set; }
        public virtual DbSet<PackageSession> PackageSession { get; set; }
        public virtual DbSet<Party> Party { get; set; }
        public virtual DbSet<PartyAccount> PartyAccount { get; set; }
        public virtual DbSet<PartyContact> PartyContact { get; set; }
        public virtual DbSet<PartyRelation> PartyRelation { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<PaymentOrder> PaymentOrder { get; set; }
        public virtual DbSet<Pickup> Pickup { get; set; }
        public virtual DbSet<PickupSpot> PickupSpot { get; set; }
        public virtual DbSet<PriceOption> PriceOption { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductCategory> ProductCategory { get; set; }
        public virtual DbSet<ProductExtra> ProductExtra { get; set; }
        public virtual DbSet<ProductField> ProductField { get; set; }
        public virtual DbSet<ProductImage> ProductImage { get; set; }
        public virtual DbSet<ProductNego> ProductNego { get; set; }
        public virtual DbSet<ProductPrice> ProductPrice { get; set; }
        public virtual DbSet<ProductRelated> ProductRelated { get; set; }
        public virtual DbSet<ProductSession> ProductSession { get; set; }
        public virtual DbSet<ProductSpot> ProductSpot { get; set; }
        public virtual DbSet<ProductSurcharge> ProductSurcharge { get; set; }
        public virtual DbSet<ProductTag> ProductTag { get; set; }
        public virtual DbSet<ProductVideo> ProductVideo { get; set; }
        public virtual DbSet<Promotion> Promotion { get; set; }
        public virtual DbSet<Purchage> Purchage { get; set; }
        public virtual DbSet<PurchageDetail> PurchageDetail { get; set; }
        public virtual DbSet<Resource> Resource { get; set; }
        public virtual DbSet<SessionOrdered> SessionOrdered { get; set; }
        public virtual DbSet<SessionResource> SessionResource { get; set; }
        public virtual DbSet<SessionRole> SessionRole { get; set; }
        public virtual DbSet<SessionTemplate> SessionTemplate { get; set; }
        public virtual DbSet<SessionTemplateWeek> SessionTemplateWeek { get; set; }
        public virtual DbSet<Spot> Spot { get; set; }
        public virtual DbSet<Supplier> Supplier { get; set; }
        public virtual DbSet<SupplierCity> SupplierCity { get; set; }
        public virtual DbSet<SupplierPayment> SupplierPayment { get; set; }
        public virtual DbSet<Surcharge> Surcharge { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=4GXVLD2;Initial Catalog=TripBox;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Agent>(entity =>
            {
                entity.Property(e => e.idAgent).ValueGeneratedNever();

                entity.Property(e => e.address).IsUnicode(false);

                entity.Property(e => e.codeAgent).IsUnicode(false);

                entity.Property(e => e.companyBilling).IsUnicode(false);

                entity.Property(e => e.email).IsUnicode(false);

                entity.Property(e => e.emailBilling).IsUnicode(false);

                entity.Property(e => e.isEditOrder).HasDefaultValueSql("('0')");

                entity.Property(e => e.isEditOrderPrice).HasDefaultValueSql("('0')");

                entity.Property(e => e.isPrivate).HasDefaultValueSql("('0')");

                entity.Property(e => e.nameAgent).IsUnicode(false);

                entity.Property(e => e.nameFirst).IsUnicode(false);

                entity.Property(e => e.nameLast).IsUnicode(false);

                entity.Property(e => e.noteBill).IsUnicode(false);

                entity.Property(e => e.rateComm).HasDefaultValueSql("('0')");

                entity.Property(e => e.tel).IsUnicode(false);

                entity.Property(e => e.typeAgent)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typePayment)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.userBilling).IsUnicode(false);

                entity.Property(e => e.website).IsUnicode(false);

                entity.HasOne(d => d.idAgentNavigation)
                    .WithOne(p => p.Agent)
                    .HasForeignKey<Agent>(d => d.idAgent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Agent");
            });

            modelBuilder.Entity<BookingField>(entity =>
            {
                entity.HasKey(e => new { e.idProduct, e.idField });

                entity.Property(e => e.isMandatory).HasDefaultValueSql("('0')");

                entity.Property(e => e.isShow).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.idFieldNavigation)
                    .WithMany(p => p.BookingField)
                    .HasForeignKey(d => d.idField)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BookingField_Field");

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.BookingField)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BookingField_Product");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.description).IsUnicode(false);

                entity.Property(e => e.isShow).HasDefaultValueSql("('1')");

                entity.Property(e => e.name).IsUnicode(false);
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.Property(e => e.codeCountry)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.continent).IsUnicode(false);

                entity.Property(e => e.country).IsUnicode(false);

                entity.Property(e => e.name).IsUnicode(false);

                entity.Property(e => e.nameEN).IsUnicode(false);

                entity.Property(e => e.state).IsUnicode(false);
            });

            modelBuilder.Entity<Extra>(entity =>
            {
                entity.Property(e => e.description).IsUnicode(false);

                entity.Property(e => e.isLimitQuantity).HasDefaultValueSql("('0')");

                entity.Property(e => e.name).IsUnicode(false);

                entity.Property(e => e.price).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityExtra).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityMax).HasDefaultValueSql("('0')");

                entity.Property(e => e.typeOrderQuantity)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.urlImage).IsUnicode(false);
            });

            modelBuilder.Entity<Field>(entity =>
            {
                entity.Property(e => e.dataType)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.listValue).IsUnicode(false);

                entity.Property(e => e.name).IsUnicode(false);

                entity.Property(e => e.typeApply)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<MasterCode>(entity =>
            {
                entity.Property(e => e.code)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.desc01).IsUnicode(false);

                entity.Property(e => e.desc02).IsUnicode(false);

                entity.Property(e => e.desc03).IsUnicode(false);

                entity.Property(e => e.typeCode)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.valueCode)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Member>(entity =>
            {
                entity.Property(e => e.idParty).ValueGeneratedNever();

                entity.Property(e => e.imageProfile).IsUnicode(false);

                entity.Property(e => e.nickname).IsUnicode(false);

                entity.Property(e => e.userID).IsUnicode(false);

                entity.Property(e => e.userPWD).IsUnicode(false);

                entity.HasOne(d => d.idPartyNavigation)
                    .WithOne(p => p.Member)
                    .HasForeignKey<Member>(d => d.idParty)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Member");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.HasKey(e => new { e.idSupplier, e.typePurpose, e.typeSend });

                entity.Property(e => e.typePurpose)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeSend)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.conclusionText).IsUnicode(false);

                entity.Property(e => e.introductionText).IsUnicode(false);

                entity.Property(e => e.isAttachFile).HasDefaultValueSql("('0')");

                entity.Property(e => e.isConclusionText).HasDefaultValueSql("('1')");

                entity.Property(e => e.isIntroductionText).HasDefaultValueSql("('1')");

                entity.Property(e => e.isSend).HasDefaultValueSql("('0')");

                entity.Property(e => e.ratePayment).HasDefaultValueSql("('0')");

                entity.Property(e => e.timetypeSend)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeTimeBase)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.valueSend).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.idSupplierNavigation)
                    .WithMany(p => p.Message)
                    .HasForeignKey(d => d.idSupplier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Message");
            });

            modelBuilder.Entity<MessageTemplate>(entity =>
            {
                entity.Property(e => e.idSupplier).ValueGeneratedNever();

                entity.Property(e => e.colorTheme)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.conclusionText).IsUnicode(false);

                entity.Property(e => e.footer).IsUnicode(false);

                entity.Property(e => e.fromEmail).IsUnicode(false);

                entity.Property(e => e.headerType)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.headerValue).IsUnicode(false);

                entity.Property(e => e.introductionText).IsUnicode(false);

                entity.Property(e => e.isAttachFile).HasDefaultValueSql("('0')");

                entity.Property(e => e.isBusinessNumber).HasDefaultValueSql("('0')");

                entity.Property(e => e.isCompanyAddress).HasDefaultValueSql("('1')");

                entity.Property(e => e.isComplanyLogo).HasDefaultValueSql("('1')");

                entity.Property(e => e.isConclusionText).HasDefaultValueSql("('1')");

                entity.Property(e => e.isConnectWithUs).HasDefaultValueSql("('1')");

                entity.Property(e => e.isCustomerDetail).HasDefaultValueSql("('1')");

                entity.Property(e => e.isGeneralTerm).HasDefaultValueSql("('1')");

                entity.Property(e => e.isGuestDetail).HasDefaultValueSql("('0')");

                entity.Property(e => e.isIntroductionText).HasDefaultValueSql("('1')");

                entity.Property(e => e.isItemDetail).HasDefaultValueSql("('0')");

                entity.Property(e => e.isItemSummary).HasDefaultValueSql("('0')");

                entity.Property(e => e.isMap).HasDefaultValueSql("('1')");

                entity.Property(e => e.isOrderSummary).HasDefaultValueSql("('0')");

                entity.Property(e => e.isPaymentDetail).HasDefaultValueSql("('1')");

                entity.Property(e => e.isPickup).HasDefaultValueSql("('1')");

                entity.Property(e => e.isProductSpecialMessage).HasDefaultValueSql("('1')");

                entity.Property(e => e.isQRCode).HasDefaultValueSql("('1')");

                entity.Property(e => e.isQuickSummary).HasDefaultValueSql("('1')");

                entity.Property(e => e.isSpecialRequirement).HasDefaultValueSql("('0')");

                entity.Property(e => e.isSpecificTerm).HasDefaultValueSql("('0')");

                entity.Property(e => e.subject).IsUnicode(false);

                entity.Property(e => e.typeFooter)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idSupplierNavigation)
                    .WithOne(p => p.MessageTemplate)
                    .HasForeignKey<MessageTemplate>(d => d.idSupplier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MessageTemplate");
            });

            modelBuilder.Entity<NegotiatedRate>(entity =>
            {
                entity.HasKey(e => new { e.name, e.idSupplier });

                entity.Property(e => e.name).IsUnicode(false);
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.commentAgent).IsUnicode(false);

                entity.Property(e => e.commentCustomer).IsUnicode(false);

                entity.Property(e => e.commentSupplier).IsUnicode(false);

                entity.Property(e => e.commentTripBox).IsUnicode(false);

                entity.Property(e => e.isFullpay).HasDefaultValueSql("('0')");

                entity.Property(e => e.isSendCheckin).HasDefaultValueSql("('0')");

                entity.Property(e => e.isSendPayment).HasDefaultValueSql("('0')");

                entity.Property(e => e.listTypePayment).IsUnicode(false);

                entity.Property(e => e.refererSource).IsUnicode(false);

                entity.Property(e => e.totalDiscount).HasDefaultValueSql("('0')");

                entity.Property(e => e.totalDue).HasDefaultValueSql("('0')");

                entity.Property(e => e.totalOrder).HasDefaultValueSql("('0')");

                entity.Property(e => e.totalPaid).HasDefaultValueSql("('0')");

                entity.Property(e => e.totalSale).HasDefaultValueSql("('0')");

                entity.Property(e => e.typeCustomer)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeOrder)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeSource)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<OrderField>(entity =>
            {
                entity.Property(e => e.valueOrder).IsUnicode(false);

                entity.HasOne(d => d.idFieldNavigation)
                    .WithMany(p => p.OrderField)
                    .HasForeignKey(d => d.idField)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderField_Field");

                entity.HasOne(d => d.idOrderNavigation)
                    .WithMany(p => p.OrderField)
                    .HasForeignKey(d => d.idOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderField_Order");
            });

            modelBuilder.Entity<OrderItem>(entity =>
            {
                entity.Property(e => e.amountExtra).HasDefaultValueSql("('0')");

                entity.Property(e => e.amountOrder).HasDefaultValueSql("('0')");

                entity.Property(e => e.amountSurcharge).HasDefaultValueSql("('0')");

                entity.Property(e => e.commission).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityExtra).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityOrder).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityUsed).HasDefaultValueSql("('0')");

                entity.Property(e => e.totalAmount).HasDefaultValueSql("('0')");

                entity.Property(e => e.typeStatus)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idOrderNavigation)
                    .WithMany(p => p.OrderItem)
                    .HasForeignKey(d => d.idOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItem2");

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.OrderItem)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItem");

                entity.HasOne(d => d.idSesstionNavigation)
                    .WithMany(p => p.OrderItem)
                    .HasForeignKey(d => d.idSesstion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItem1");
            });

            modelBuilder.Entity<OrderItemExtra>(entity =>
            {
                entity.Property(e => e.amountExtra).HasDefaultValueSql("('0')");

                entity.Property(e => e.priceExtra).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityExtra).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.idExtraNavigation)
                    .WithMany(p => p.OrderItemExtra)
                    .HasForeignKey(d => d.idExtra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemExtra_Extra");

                entity.HasOne(d => d.idOrderItemNavigation)
                    .WithMany(p => p.OrderItemExtra)
                    .HasForeignKey(d => d.idOrderItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemExtra_OrderItem");
            });

            modelBuilder.Entity<OrderItemField>(entity =>
            {
                entity.Property(e => e.valueOrderItem).IsUnicode(false);

                entity.HasOne(d => d.idFieldNavigation)
                    .WithMany(p => p.OrderItemField)
                    .HasForeignKey(d => d.idField)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemField");

                entity.HasOne(d => d.idOrderItemNavigation)
                    .WithMany(p => p.OrderItemField)
                    .HasForeignKey(d => d.idOrderItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemField1");
            });

            modelBuilder.Entity<OrderItemProduct>(entity =>
            {
                entity.Property(e => e.amountOrder).HasDefaultValueSql("('0')");

                entity.Property(e => e.price).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityOrder).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityUnit).HasDefaultValueSql("('1')");

                entity.Property(e => e.quantityUsed).HasDefaultValueSql("('0')");

                entity.Property(e => e.typePriceOption)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idOrderItemNavigation)
                    .WithMany(p => p.OrderItemProduct)
                    .HasForeignKey(d => d.idOrderItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemProduct_OrderItem");

                entity.HasOne(d => d.idPriceNavigation)
                    .WithMany(p => p.OrderItemProduct)
                    .HasForeignKey(d => d.idPrice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemProduct_Price");
            });

            modelBuilder.Entity<OrderItemResource>(entity =>
            {
                entity.HasKey(e => new { e.idOrderItem, e.idSession, e.idResource });

                entity.Property(e => e.quantityAssign).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.id)
                    .WithMany(p => p.OrderItemResource)
                    .HasForeignKey(d => new { d.idOrderItem, d.idSession })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemResource_Session");

                entity.HasOne(d => d.idNavigation)
                    .WithMany(p => p.OrderItemResource)
                    .HasForeignKey(d => new { d.idResource, d.idSession })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemResource_Resource");
            });

            modelBuilder.Entity<OrderItemSession>(entity =>
            {
                entity.HasKey(e => new { e.idOrderItem, e.idSession });

                entity.Property(e => e.isCheckin).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityUsed).HasDefaultValueSql("('0')");

                entity.Property(e => e.timePickup).HasDefaultValueSql("('00:00')");

                entity.HasOne(d => d.idOrderItemNavigation)
                    .WithMany(p => p.OrderItemSession)
                    .HasForeignKey(d => d.idOrderItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemSession1");

                entity.HasOne(d => d.idSessionNavigation)
                    .WithMany(p => p.OrderItemSession)
                    .HasForeignKey(d => d.idSession)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemSession");
            });

            modelBuilder.Entity<Package>(entity =>
            {
                entity.HasKey(e => new { e.idProduct, e.idProductPart });

                entity.Property(e => e.day).HasDefaultValueSql("('0')");

                entity.Property(e => e.isAllday).HasDefaultValueSql("('0')");

                entity.Property(e => e.timeFinish).HasDefaultValueSql("('00:00')");

                entity.Property(e => e.timeStart).HasDefaultValueSql("('00:00')");

                entity.Property(e => e.typeProduct)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.PackageidProductNavigation)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Package_Finished");

                entity.HasOne(d => d.idProductPartNavigation)
                    .WithMany(p => p.PackageidProductPartNavigation)
                    .HasForeignKey(d => d.idProductPart)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Package_Part");
            });

            modelBuilder.Entity<PackageSession>(entity =>
            {
                entity.HasKey(e => new { e.idProduct, e.idProductPart, e.idSessionPart });

                entity.HasOne(d => d.idSessionPartNavigation)
                    .WithMany(p => p.PackageSession)
                    .HasForeignKey(d => d.idSessionPart)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PackageSession_Session");

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.PackageSession)
                    .HasForeignKey(d => new { d.idProduct, d.idProductPart })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PackageSession_Package");
            });

            modelBuilder.Entity<Party>(entity =>
            {
                entity.Property(e => e.companyAlias).IsUnicode(false);

                entity.Property(e => e.gender)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.nameCompany).IsUnicode(false);

                entity.Property(e => e.nameFirst).IsUnicode(false);

                entity.Property(e => e.nameLast).IsUnicode(false);

                entity.Property(e => e.title).IsUnicode(false);

                entity.Property(e => e.typeParty)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<PartyAccount>(entity =>
            {
                entity.Property(e => e.accountName).IsUnicode(false);

                entity.Property(e => e.accountNo).IsUnicode(false);

                entity.Property(e => e.typeAccount)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeFinance)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idPartyHolderNavigation)
                    .WithMany(p => p.PartyAccount)
                    .HasForeignKey(d => d.idPartyHolder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartyAccount");
            });

            modelBuilder.Entity<PartyContact>(entity =>
            {
                entity.HasKey(e => new { e.idParty, e.typeContact });

                entity.Property(e => e.typeContact)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.contact).IsUnicode(false);

                entity.HasOne(d => d.idPartyNavigation)
                    .WithMany(p => p.PartyContact)
                    .HasForeignKey(d => d.idParty)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartyContact");
            });

            modelBuilder.Entity<PartyRelation>(entity =>
            {
                entity.HasKey(e => new { e.idParty1, e.idParty2, e.typeRelation });

                entity.Property(e => e.typeRelation)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idParty1Navigation)
                    .WithMany(p => p.PartyRelationidParty1Navigation)
                    .HasForeignKey(d => d.idParty1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartyRelation1");

                entity.HasOne(d => d.idParty2Navigation)
                    .WithMany(p => p.PartyRelationidParty2Navigation)
                    .HasForeignKey(d => d.idParty2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartyRelation");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.Property(e => e.amount).HasDefaultValueSql("('0')");

                entity.Property(e => e.note).IsUnicode(false);

                entity.Property(e => e.typePayment)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeReceipt)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<PaymentOrder>(entity =>
            {
                entity.Property(e => e.amount).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.idOrderNavigation)
                    .WithMany(p => p.PaymentOrder)
                    .HasForeignKey(d => d.idOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentOrder_Order");

                entity.HasOne(d => d.idPaymentNavigation)
                    .WithMany(p => p.PaymentOrder)
                    .HasForeignKey(d => d.idPayment)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentOrder_Payment");
            });

            modelBuilder.Entity<Pickup>(entity =>
            {
                entity.Property(e => e.isAdditionalNote).HasDefaultValueSql("('0')");

                entity.Property(e => e.isAllowRequest).HasDefaultValueSql("('0')");

                entity.Property(e => e.miniteDuration).HasDefaultValueSql("('0')");

                entity.Property(e => e.name).IsUnicode(false);

                entity.Property(e => e.noteAdditional).IsUnicode(false);

                entity.Property(e => e.noteRequest).IsUnicode(false);
            });

            modelBuilder.Entity<PickupSpot>(entity =>
            {
                entity.HasKey(e => new { e.idPickup, e.idSpot });

                entity.Property(e => e.minutePrior).HasDefaultValueSql("('0')");

                entity.Property(e => e.name).IsUnicode(false);

                entity.Property(e => e.noteInstruction).IsUnicode(false);

                entity.Property(e => e.seq).HasDefaultValueSql("('1')");

                entity.HasOne(d => d.idPickupNavigation)
                    .WithMany(p => p.PickupSpot)
                    .HasForeignKey(d => d.idPickup)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PickupSpot_Pickup");

                entity.HasOne(d => d.idSpotNavigation)
                    .WithMany(p => p.PickupSpot)
                    .HasForeignKey(d => d.idSpot)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PickupSpot_Spot");
            });

            modelBuilder.Entity<PriceOption>(entity =>
            {
                entity.HasKey(e => new { e.idProduct, e.typePriceOption });

                entity.Property(e => e.typePriceOption)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.isGroup).HasDefaultValueSql("('0')");

                entity.Property(e => e.note).IsUnicode(false);

                entity.Property(e => e.price).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityMax).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantitytUnit).HasDefaultValueSql("('1')");

                entity.Property(e => e.rateMarketplace).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.PriceOption)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PriceOption_Product");

                entity.HasOne(d => d.idResourceNavigation)
                    .WithMany(p => p.PriceOption)
                    .HasForeignKey(d => d.idResource)
                    .HasConstraintName("FK_PriceOption_Resource");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.codeProduct).IsUnicode(false);

                entity.Property(e => e.dayMinPayment).HasDefaultValueSql("('0')");

                entity.Property(e => e.descriptionLong).IsUnicode(false);

                entity.Property(e => e.descriptionShort).IsUnicode(false);

                entity.Property(e => e.isAllday).HasDefaultValueSql("('0')");

                entity.Property(e => e.isAllowWaiting).HasDefaultValueSql("('0')");

                entity.Property(e => e.isIncludeExtra).HasDefaultValueSql("('0')");

                entity.Property(e => e.isMinPayment).HasDefaultValueSql("('1')");

                entity.Property(e => e.isPart).HasDefaultValueSql("('1')");

                entity.Property(e => e.isPaymentFull).HasDefaultValueSql("('1')");

                entity.Property(e => e.isShowSeat).HasDefaultValueSql("('0')");

                entity.Property(e => e.isSpecialPayment).HasDefaultValueSql("('0')");

                entity.Property(e => e.isSpecialRule).HasDefaultValueSql("('0')");

                entity.Property(e => e.listCity).IsUnicode(false);

                entity.Property(e => e.listSpot).IsUnicode(false);

                entity.Property(e => e.listTime).IsUnicode(false);

                entity.Property(e => e.name).IsUnicode(false);

                entity.Property(e => e.note).IsUnicode(false);

                entity.Property(e => e.productColor).IsUnicode(false);

                entity.Property(e => e.quantityAfter).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityLabel).IsUnicode(false);

                entity.Property(e => e.quantityLabelPlural).IsUnicode(false);

                entity.Property(e => e.quantityMaxOrder).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityMinOrder).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityMinSession).HasDefaultValueSql("('0')");

                entity.Property(e => e.rateDeposit).HasDefaultValueSql("('0')");

                entity.Property(e => e.timeTypeDuration)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.timeTypeMiniumNotice)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeConfirm)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeDepoist)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeInventory)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeProduct)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeSessionSchedule)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.valueDuration).HasDefaultValueSql("('0')");

                entity.Property(e => e.valueMiniumNotice).HasDefaultValueSql("('0')");

                entity.Property(e => e.valueSpecialRule).IsUnicode(false);

                entity.HasOne(d => d.idPickupNavigation)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.idPickup)
                    .HasConstraintName("FK_Product");
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.HasKey(e => new { e.idCategory, e.idProduct });

                entity.HasOne(d => d.idCategoryNavigation)
                    .WithMany(p => p.ProductCategory)
                    .HasForeignKey(d => d.idCategory)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCategory");

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.ProductCategory)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCategory1");
            });

            modelBuilder.Entity<ProductExtra>(entity =>
            {
                entity.HasKey(e => new { e.idProduct, e.idExtra });

                entity.Property(e => e.seq).HasDefaultValueSql("('1')");

                entity.HasOne(d => d.idExtraNavigation)
                    .WithMany(p => p.ProductExtra)
                    .HasForeignKey(d => d.idExtra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductExtra_Extra");

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.ProductExtra)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductExtra_Product");
            });

            modelBuilder.Entity<ProductField>(entity =>
            {
                entity.HasKey(e => new { e.idProduct, e.idField });

                entity.Property(e => e.valueProduct).IsUnicode(false);

                entity.HasOne(d => d.idFieldNavigation)
                    .WithMany(p => p.ProductField)
                    .HasForeignKey(d => d.idField)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductField_Field");

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.ProductField)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductField_Product");
            });

            modelBuilder.Entity<ProductImage>(entity =>
            {
                entity.Property(e => e.isDefault).HasDefaultValueSql("('0')");

                entity.Property(e => e.seq).HasDefaultValueSql("('1')");

                entity.Property(e => e.urlImageFull).IsUnicode(false);

                entity.Property(e => e.urlImageLarge).IsUnicode(false);

                entity.Property(e => e.urlImageMedium).IsUnicode(false);

                entity.Property(e => e.urlImageSmall).IsUnicode(false);

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.ProductImage)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductImage");
            });

            modelBuilder.Entity<ProductNego>(entity =>
            {
                entity.HasKey(e => new { e.idAgent, e.idProduct, e.typePriceOption, e.idSupplier, e.nameNego });

                entity.Property(e => e.typePriceOption)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.nameNego).IsUnicode(false);

                entity.Property(e => e.rateComm).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.idAgentNavigation)
                    .WithMany(p => p.ProductNego)
                    .HasForeignKey(d => d.idAgent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductNego_Agent");

                entity.HasOne(d => d.NegotiatedRate)
                    .WithMany(p => p.ProductNego)
                    .HasForeignKey(d => new { d.nameNego, d.idSupplier })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductNego_Nego");
            });

            modelBuilder.Entity<ProductPrice>(entity =>
            {
                entity.Property(e => e.cost).HasDefaultValueSql("('0')");

                entity.Property(e => e.price).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityMax).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityOrder).HasDefaultValueSql("('0')");

                entity.Property(e => e.typePriceOption)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idSessionNavigation)
                    .WithMany(p => p.ProductPrice)
                    .HasForeignKey(d => d.idSession)
                    .HasConstraintName("FK_ProductPrice_Session");
            });

            modelBuilder.Entity<ProductRelated>(entity =>
            {
                entity.HasKey(e => new { e.idProduct1, e.idProduct2 });

                entity.HasOne(d => d.idProduct1Navigation)
                    .WithMany(p => p.ProductRelatedidProduct1Navigation)
                    .HasForeignKey(d => d.idProduct1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductRelated1");

                entity.HasOne(d => d.idProduct2Navigation)
                    .WithMany(p => p.ProductRelatedidProduct2Navigation)
                    .HasForeignKey(d => d.idProduct2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductRelated2");
            });

            modelBuilder.Entity<ProductSession>(entity =>
            {
                entity.Property(e => e.isAllday).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityMax).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityUsed).HasDefaultValueSql("('0')");

                entity.Property(e => e.timetypeDuration)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.valueDuration).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.idTemplateNavigation)
                    .WithMany(p => p.ProductSession)
                    .HasForeignKey(d => d.idTemplate)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductSession");
            });

            modelBuilder.Entity<ProductSpot>(entity =>
            {
                entity.HasKey(e => new { e.idProduct, e.seq, e.idSpot });

                entity.Property(e => e.seq).HasDefaultValueSql("('1')");

                entity.Property(e => e.typeService)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.ProductSpot)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductSpot_Product");

                entity.HasOne(d => d.idSpotNavigation)
                    .WithMany(p => p.ProductSpot)
                    .HasForeignKey(d => d.idSpot)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductSpot_Spot");
            });

            modelBuilder.Entity<ProductSurcharge>(entity =>
            {
                entity.Property(e => e.idProduct).ValueGeneratedNever();

                entity.Property(e => e.seq).HasDefaultValueSql("('1')");

                entity.HasOne(d => d.idProductNavigation)
                    .WithOne(p => p.ProductSurcharge)
                    .HasForeignKey<ProductSurcharge>(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductSurcharge_Product");

                entity.HasOne(d => d.idSurchargeNavigation)
                    .WithMany(p => p.ProductSurcharge)
                    .HasForeignKey(d => d.idSurcharge)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductSurcharge_Surcharge");
            });

            modelBuilder.Entity<ProductTag>(entity =>
            {
                entity.HasKey(e => new { e.idProduct, e.typeTag, e.tag });

                entity.Property(e => e.typeTag)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.tag).IsUnicode(false);

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.ProductTag)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductTag");
            });

            modelBuilder.Entity<ProductVideo>(entity =>
            {
                entity.Property(e => e.isDefault).HasDefaultValueSql("('0')");

                entity.Property(e => e.seq).HasDefaultValueSql("('1')");

                entity.Property(e => e.typePlatform)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.urlVideo).IsUnicode(false);

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.ProductVideo)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductVideo");
            });

            modelBuilder.Entity<Promotion>(entity =>
            {
                entity.Property(e => e.codePromotion).IsUnicode(false);

                entity.Property(e => e.amountLimit).HasDefaultValueSql("('0')");

                entity.Property(e => e.amountMin).HasDefaultValueSql("('0')");

                entity.Property(e => e.isIncludeExtra).HasDefaultValueSql("('0')");

                entity.Property(e => e.isIncludeSurcharge).HasDefaultValueSql("('0')");

                entity.Property(e => e.isLimitTotal).HasDefaultValueSql("('1')");

                entity.Property(e => e.ratePromotion).HasDefaultValueSql("('0')");

                entity.Property(e => e.typeApply)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeApplyProduct)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.Promotion)
                    .HasForeignKey(d => d.idProduct)
                    .HasConstraintName("FK_Promotion");
            });

            modelBuilder.Entity<Purchage>(entity =>
            {
                entity.Property(e => e.companyPurchage).IsUnicode(false);

                entity.Property(e => e.note).IsUnicode(false);

                entity.Property(e => e.totalPurchage).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.idCompanyPurchaseNavigation)
                    .WithMany(p => p.Purchage)
                    .HasForeignKey(d => d.idCompanyPurchase)
                    .HasConstraintName("FK_Purchage");
            });

            modelBuilder.Entity<PurchageDetail>(entity =>
            {
                entity.Property(e => e.amountPurchage).HasDefaultValueSql("('0')");

                entity.Property(e => e.cost).HasDefaultValueSql("('0')");

                entity.Property(e => e.note).IsUnicode(false);

                entity.Property(e => e.quantityPurchage).HasDefaultValueSql("('0')");

                entity.Property(e => e.typeItem)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typePayment)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idPurchageNavigation)
                    .WithMany(p => p.PurchageDetail)
                    .HasForeignKey(d => d.idPurchage)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchageDetail_Purchase");

                entity.HasOne(d => d.idSessionNavigation)
                    .WithMany(p => p.PurchageDetail)
                    .HasForeignKey(d => d.idSession)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchageDetail_Session");
            });

            modelBuilder.Entity<Resource>(entity =>
            {
                entity.Property(e => e.isLimitQuantity).HasDefaultValueSql("('0')");

                entity.Property(e => e.name).IsUnicode(false);

                entity.Property(e => e.quantityMax).HasDefaultValueSql("('0')");

                entity.Property(e => e.typeResource)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeShace)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SessionOrdered>(entity =>
            {
                entity.Property(e => e.idSessionPart).ValueGeneratedNever();

                entity.Property(e => e.amountExpense).HasDefaultValueSql("('0')");

                entity.Property(e => e.amountProfit).HasDefaultValueSql("('0')");

                entity.Property(e => e.amountSale).HasDefaultValueSql("('0')");

                entity.Property(e => e.commAgent).HasDefaultValueSql("('0')");

                entity.Property(e => e.commOperation).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityUsed).HasDefaultValueSql("('0')");
            });

            modelBuilder.Entity<SessionResource>(entity =>
            {
                entity.HasKey(e => new { e.idResource, e.idSession });

                entity.Property(e => e.quantityMax).HasDefaultValueSql("('0')");

                entity.Property(e => e.quantityUsed).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.idResourceNavigation)
                    .WithMany(p => p.SessionResource)
                    .HasForeignKey(d => d.idResource)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessionResource_Resource");

                entity.HasOne(d => d.idSessionNavigation)
                    .WithMany(p => p.SessionResource)
                    .HasForeignKey(d => d.idSession)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessionResource_Session");
            });

            modelBuilder.Entity<SessionRole>(entity =>
            {
                entity.Property(e => e.typeRole)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idPartyNavigation)
                    .WithMany(p => p.SessionRole)
                    .HasForeignKey(d => d.idParty)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessionRole2");

                entity.HasOne(d => d.idSessionPartNavigation)
                    .WithMany(p => p.SessionRole)
                    .HasForeignKey(d => d.idSessionPart)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessionRole");
            });

            modelBuilder.Entity<SessionTemplate>(entity =>
            {
                entity.Property(e => e.minuteDuration).HasDefaultValueSql("('0')");

                entity.Property(e => e.timetypeRepeat)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.valueRepeat).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.idProductNavigation)
                    .WithMany(p => p.SessionTemplate)
                    .HasForeignKey(d => d.idProduct)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessionTemplate");
            });

            modelBuilder.Entity<SessionTemplateWeek>(entity =>
            {
                entity.HasKey(e => new { e.idTemplate, e.weekdayNo });

                entity.Property(e => e.weekdayNo).HasDefaultValueSql("('0')");

                entity.Property(e => e.timeEnd).HasDefaultValueSql("('00:00')");

                entity.Property(e => e.timeStart).HasDefaultValueSql("('00:00')");

                entity.HasOne(d => d.idTemplateNavigation)
                    .WithMany(p => p.SessionTemplateWeek)
                    .HasForeignKey(d => d.idTemplate)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessionTemplateWeek");
            });

            modelBuilder.Entity<Spot>(entity =>
            {
                entity.Property(e => e.address1).IsUnicode(false);

                entity.Property(e => e.address2).IsUnicode(false);

                entity.Property(e => e.latitude).IsUnicode(false);

                entity.Property(e => e.longitude).IsUnicode(false);

                entity.Property(e => e.name).IsUnicode(false);

                entity.Property(e => e.postcode).IsUnicode(false);

                entity.Property(e => e.typeSpot)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idCityNavigation)
                    .WithMany(p => p.Spot)
                    .HasForeignKey(d => d.idCity)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Spot");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.Property(e => e.idSupplier).ValueGeneratedNever();

                entity.Property(e => e.businessNumber).IsUnicode(false);

                entity.Property(e => e.city).IsUnicode(false);

                entity.Property(e => e.continent).IsUnicode(false);

                entity.Property(e => e.country).IsUnicode(false);

                entity.Property(e => e.currency)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.dayMinPayment).HasDefaultValueSql("('0')");

                entity.Property(e => e.description).IsUnicode(false);

                entity.Property(e => e.email).IsUnicode(false);

                entity.Property(e => e.fax).IsUnicode(false);

                entity.Property(e => e.firstName).IsUnicode(false);

                entity.Property(e => e.isExplicitConsent).HasDefaultValueSql("('1')");

                entity.Property(e => e.isIncludeOrderFee).HasDefaultValueSql("('0')");

                entity.Property(e => e.isMinPayment).HasDefaultValueSql("('1')");

                entity.Property(e => e.isPaymentFull).HasDefaultValueSql("('1')");

                entity.Property(e => e.language)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.lastName).IsUnicode(false);

                entity.Property(e => e.latitude).IsUnicode(false);

                entity.Property(e => e.listCity).IsUnicode(false);

                entity.Property(e => e.listTypePayment).IsUnicode(false);

                entity.Property(e => e.longitude).IsUnicode(false);

                entity.Property(e => e.mobile).IsUnicode(false);

                entity.Property(e => e.name).IsUnicode(false);

                entity.Property(e => e.openingHours).IsUnicode(false);

                entity.Property(e => e.phone).IsUnicode(false);

                entity.Property(e => e.postcode).IsUnicode(false);

                entity.Property(e => e.privacyPolicy).IsUnicode(false);

                entity.Property(e => e.rateDeposit).HasDefaultValueSql("('0')");

                entity.Property(e => e.term).IsUnicode(false);

                entity.Property(e => e.timezone)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeBusiness)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeDepoist)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.urlFacebook).IsUnicode(false);

                entity.Property(e => e.urlGoogle).IsUnicode(false);

                entity.Property(e => e.urlHost).IsUnicode(false);

                entity.Property(e => e.urlInstagram).IsUnicode(false);

                entity.Property(e => e.urlLogo).IsUnicode(false);

                entity.Property(e => e.urlPinterest).IsUnicode(false);

                entity.Property(e => e.urlTripadvisor).IsUnicode(false);

                entity.Property(e => e.urlTwitter).IsUnicode(false);

                entity.Property(e => e.urlWebsite).IsUnicode(false);

                entity.Property(e => e.urlYoutube).IsUnicode(false);

                entity.Property(e => e.weekStartNo).HasDefaultValueSql("('0')");

                entity.Property(e => e.youtubeID).IsUnicode(false);

                entity.HasOne(d => d.idSupplierNavigation)
                    .WithOne(p => p.Supplier)
                    .HasForeignKey<Supplier>(d => d.idSupplier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supplier");
            });

            modelBuilder.Entity<SupplierCity>(entity =>
            {
                entity.HasKey(e => new { e.idSupplier, e.idCity });

                entity.HasOne(d => d.idCityNavigation)
                    .WithMany(p => p.SupplierCity)
                    .HasForeignKey(d => d.idCity)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupplierCity_City");

                entity.HasOne(d => d.idSupplierNavigation)
                    .WithMany(p => p.SupplierCity)
                    .HasForeignKey(d => d.idSupplier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupplierCity_Supplier");
            });

            modelBuilder.Entity<SupplierPayment>(entity =>
            {
                entity.HasKey(e => new { e.idSupplier, e.typePayment });

                entity.Property(e => e.typePayment)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idSupplierNavigation)
                    .WithMany(p => p.SupplierPayment)
                    .HasForeignKey(d => d.idSupplier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SupplierPayment");
            });

            modelBuilder.Entity<Surcharge>(entity =>
            {
                entity.Property(e => e.label).IsUnicode(false);

                entity.Property(e => e.note).IsUnicode(false);

                entity.Property(e => e.rateSurcharge).HasDefaultValueSql("('0')");

                entity.Property(e => e.typeApply)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.typeSurcharge)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idSupplierNavigation)
                    .WithMany(p => p.Surcharge)
                    .HasForeignKey(d => d.idSupplier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Surcharge");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => new { e.idSupplier, e.idParty });

                entity.Property(e => e.isAbandonCart).HasDefaultValueSql("('1')");

                entity.Property(e => e.isBouncedEmail).HasDefaultValueSql("('1')");

                entity.Property(e => e.isMessage).HasDefaultValueSql("('0')");

                entity.Property(e => e.isNewCompany).HasDefaultValueSql("('1')");

                entity.Property(e => e.isOrderInternal).HasDefaultValueSql("('1')");

                entity.Property(e => e.isOrderOnline).HasDefaultValueSql("('1')");

                entity.Property(e => e.isViewCompany).HasDefaultValueSql("('0')");

                entity.Property(e => e.isWeeklyReport).HasDefaultValueSql("('0')");

                entity.Property(e => e.typeRole)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.idPartyNavigation)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.idParty)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Member");

                entity.HasOne(d => d.idSupplierNavigation)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.idSupplier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Supplier");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}